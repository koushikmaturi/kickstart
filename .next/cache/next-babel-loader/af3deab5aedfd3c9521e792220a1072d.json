{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n// Solidity doesn't support returning array of structs.\n// So, it will be challenging to get a list of requests and details\nimport React, { Component } from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport { Link } from '../../../routes';\nimport Layout from '../../../components/Layout';\nimport Campaign from '../../../ethereum/campaign';\nimport RequestRow from '../../../components/RequestRow';\n\nvar RequestIndex = /*#__PURE__*/function (_Component) {\n  _inherits(RequestIndex, _Component);\n\n  var _super = _createSuper(RequestIndex);\n\n  function RequestIndex() {\n    _classCallCheck(this, RequestIndex);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RequestIndex, [{\n    key: \"renderRows\",\n    value: function renderRows() {\n      var _this = this;\n\n      return this.props.requests.map(function (request, index) {\n        return __jsx(RequestRow, {\n          key: index,\n          id: index,\n          request: request,\n          address: _this.props.address,\n          approversCount: _this.props.approversCount\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Using some ES 16 code to simplify tale creation\n      // Instead of typing Table.Header, Table.Row, etc\n      // Now we can njust type the word and its enough\n      var Header = Table.Header,\n          Row = Table.Row,\n          HeaderCell = Table.HeaderCell,\n          Body = Table.Body;\n      return __jsx(Layout, null, __jsx(\"h3\", null, \"Requests\"), __jsx(Link, {\n        route: \"/campaigns/\".concat(this.props.address, \"/requests/new\")\n      }, __jsx(\"a\", null, __jsx(Button, {\n        primary: true,\n        floated: \"right\"\n      }, \"Add Request\"))), __jsx(Table, null, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"ID\"), __jsx(HeaderCell, null, \"Description\"), __jsx(HeaderCell, null, \"Amount\"), __jsx(HeaderCell, null, \"Recipient\"), __jsx(HeaderCell, null, \"Approval Count\"), __jsx(HeaderCell, null, \"Approve\"), __jsx(HeaderCell, null, \"Finalize\"))), __jsx(Body, null, this.renderRows())));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var address, campaign, requestCount, approversCount, requests;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              address = props.query.address;\n              campaign = Campaign(address);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(campaign.methods.getRequestsCount().call());\n\n            case 4:\n              requestCount = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(campaign.methods.approversCount().call());\n\n            case 7:\n              approversCount = _context.sent;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(Promise.all(Array(parseInt(requestCount)).fill().map(function (element, index) {\n                return campaign.methods.requests(index).call();\n              })));\n\n            case 10:\n              requests = _context.sent;\n              return _context.abrupt(\"return\", {\n                address: address,\n                requests: requests,\n                requestCount: requestCount,\n                approversCount: approversCount\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return RequestIndex;\n}(Component);\n\nexport default RequestIndex;","map":{"version":3,"sources":["/Users/koushik/kickstart/pages/campaigns/requests/index.js"],"names":["React","Component","Button","Table","Link","Layout","Campaign","RequestRow","RequestIndex","props","requests","map","request","index","address","approversCount","Header","Row","HeaderCell","Body","renderRows","query","campaign","methods","getRequestsCount","call","requestCount","Promise","all","Array","parseInt","fill","element"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,MAAR,EAAgBC,KAAhB,QAA4B,mBAA5B;AACA,SAAQC,IAAR,QAAmB,iBAAnB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;;IACMC,Y;;;;;;;;;;;;;WAkBJ,sBAAa;AAAA;;AACX,aAAO,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,GAApB,CAAwB,UAACC,OAAD,EAASC,KAAT,EAAmB;AAChD,eACE,MAAC,UAAD;AACE,UAAA,GAAG,EAAEA,KADP;AAEE,UAAA,EAAE,EAAEA,KAFN;AAGE,UAAA,OAAO,EAAED,OAHX;AAIE,UAAA,OAAO,EAAE,KAAI,CAACH,KAAL,CAAWK,OAJtB;AAKE,UAAA,cAAc,EAAE,KAAI,CAACL,KAAL,CAAWM;AAL7B,UADF;AASD,OAVM,CAAP;AAWD;;;WAED,kBAAS;AACP;AACA;AACA;AAHO,UAIAC,MAJA,GAIiCb,KAJjC,CAIAa,MAJA;AAAA,UAIQC,GAJR,GAIiCd,KAJjC,CAIQc,GAJR;AAAA,UAIaC,UAJb,GAIiCf,KAJjC,CAIae,UAJb;AAAA,UAIyBC,IAJzB,GAIiChB,KAJjC,CAIyBgB,IAJzB;AAKP,aACE,MAAC,MAAD,QACE,6BADF,EAEE,MAAC,IAAD;AAAM,QAAA,KAAK,uBAAgB,KAAKV,KAAL,CAAWK,OAA3B;AAAX,SACA,iBACA,MAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAgB,QAAA,OAAO,EAAC;AAAxB,uBADA,CADA,CAFF,EAOE,MAAC,KAAD,QACE,MAAC,MAAD,QACE,MAAC,GAAD,QACE,MAAC,UAAD,aADF,EAEE,MAAC,UAAD,sBAFF,EAGE,MAAC,UAAD,iBAHF,EAIE,MAAC,UAAD,oBAJF,EAKE,MAAC,UAAD,yBALF,EAME,MAAC,UAAD,kBANF,EAOE,MAAC,UAAD,mBAPF,CADF,CADF,EAYE,MAAC,IAAD,QACG,KAAKM,UAAL,EADH,CAZF,CAPF,CADF;AA0BD;;;WA7DD,yBAA6BX,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACUK,cAAAA,OADV,GACsBL,KAAK,CAACY,KAD5B,CACUP,OADV;AAEQQ,cAAAA,QAFR,GAEmBhB,QAAQ,CAACQ,OAAD,CAF3B;AAAA;AAAA,+CAG6BQ,QAAQ,CAACC,OAAT,CAAiBC,gBAAjB,GAAoCC,IAApC,EAH7B;;AAAA;AAGQC,cAAAA,YAHR;AAAA;AAAA,+CAI+BJ,QAAQ,CAACC,OAAT,CAAiBR,cAAjB,GAAkCU,IAAlC,EAJ/B;;AAAA;AAIQV,cAAAA,cAJR;AAAA;AAAA,+CAMyBY,OAAO,CAACC,GAAR,CACrBC,KAAK,CAACC,QAAQ,CAACJ,YAAD,CAAT,CAAL,CACGK,IADH,GAEGpB,GAFH,CAEO,UAACqB,OAAD,EAAUnB,KAAV,EAAoB;AACvB,uBAAOS,QAAQ,CAACC,OAAT,CAAiBb,QAAjB,CAA0BG,KAA1B,EAAiCY,IAAjC,EAAP;AACD,eAJH,CADqB,CANzB;;AAAA;AAMQf,cAAAA,QANR;AAAA,+CAaS;AAAEI,gBAAAA,OAAO,EAAPA,OAAF;AAAWJ,gBAAAA,QAAQ,EAARA,QAAX;AAAqBgB,gBAAAA,YAAY,EAAZA,YAArB;AAAmCX,gBAAAA,cAAc,EAAdA;AAAnC,eAbT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;EAFyBd,S;;AAkE3B,eAAeO,YAAf","sourcesContent":["// Solidity doesn't support returning array of structs.\n// So, it will be challenging to get a list of requests and details\nimport React, {Component} from 'react';\nimport {Button, Table} from 'semantic-ui-react';\nimport {Link} from '../../../routes';\nimport Layout from '../../../components/Layout';\nimport Campaign from '../../../ethereum/campaign';\nimport RequestRow from '../../../components/RequestRow';\nclass RequestIndex extends Component {\n\n  static async getInitialProps(props) {\n    const { address } = props.query;\n    const campaign = Campaign(address);\n    const requestCount = await campaign.methods.getRequestsCount().call();\n    const approversCount = await campaign.methods.approversCount().call();\n\n    const requests = await Promise.all(\n      Array(parseInt(requestCount))\n        .fill()\n        .map((element, index) => {\n          return campaign.methods.requests(index).call();\n        })\n    );\n    return { address, requests, requestCount, approversCount };\n  }\n\n  renderRows() {\n    return this.props.requests.map((request,index) => {\n      return (\n        <RequestRow\n          key={index}\n          id={index}\n          request={request}\n          address={this.props.address}\n          approversCount={this.props.approversCount}\n      />\n      );\n    });\n  }\n\n  render() {\n    // Using some ES 16 code to simplify tale creation\n    // Instead of typing Table.Header, Table.Row, etc\n    // Now we can njust type the word and its enough\n    const {Header, Row, HeaderCell, Body} = Table;\n    return (\n      <Layout>\n        <h3>Requests</h3>\n        <Link route={`/campaigns/${this.props.address}/requests/new`}>\n        <a>\n        <Button primary floated='right'>Add Request</Button>\n        </a>\n        </Link>\n        <Table>\n          <Header>\n            <Row>\n              <HeaderCell>ID</HeaderCell>\n              <HeaderCell>Description</HeaderCell>\n              <HeaderCell>Amount</HeaderCell>\n              <HeaderCell>Recipient</HeaderCell>\n              <HeaderCell>Approval Count</HeaderCell>\n              <HeaderCell>Approve</HeaderCell>\n              <HeaderCell>Finalize</HeaderCell>\n            </Row>\n          </Header>\n          <Body>\n            {this.renderRows()}\n          </Body>\n        </Table>\n      </Layout>\n    );\n  }\n}\n\nexport default RequestIndex;\n"]},"metadata":{},"sourceType":"module"}