{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes'; // npm run dev -- start the server\n\nclass CampaignIndex extends Component {\n  // The next server only renders getInitialProps unlike normal react apps\n  // where you can perform data loading with componentDidMount. So, in this app,\n  // we are using getInitialProps for data loading\n  // When you put static keyword, you can run the function without creating an\n  // instance of the component\n  static async getInitialProps() {\n    const campaigns = await factory.methods.getDeployedCampaigns().call(); // returns an object to be used as props (properties) of the component\n\n    return {\n      campaigns\n    };\n  }\n\n  renderCampaigns() {\n    // map() applies the function (inside it) over all the elements of the\n    // array and returns all the 'returns' to the variable on the left.\n    const items = this.props.campaigns.map(address => {\n      // fluid: yes, makes the card strech over the whole width of page, if\n      // unobstructed\n      return {\n        header: address,\n        description: __jsx(\"a\", null, \"View Campaign\"),\n        fluid: true\n      };\n    });\n    return __jsx(Card.Group, {\n      items: items\n    });\n  }\n\n  render() {\n    return (// floated='right' moves the button to the right (CSS styling)\n      __jsx(Layout, null, __jsx(\"div\", null, __jsx(\"h3\", null, \"Open Campaigns\"), __jsx(Link, {\n        route: \"/campaigns/new\"\n      }, __jsx(\"a\", null, __jsx(Button, {\n        floated: \"right\",\n        content: \"Create Campaign\",\n        icon: \"add circle\",\n        primary: true\n      }))), this.renderCampaigns()))\n    ); // Primary adds color to the button\n  }\n\n} // Next expects that we export a react component in every page\n\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/koushik/kickstart/pages/index.js"],"names":["React","Component","Card","Button","factory","Layout","Link","CampaignIndex","getInitialProps","campaigns","methods","getDeployedCampaigns","call","renderCampaigns","items","props","map","address","header","description","fluid","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,mBAA3B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,IAAR,QAAmB,WAAnB,C,CACA;;AAEA,MAAMC,aAAN,SAA4BN,SAA5B,CAAsC;AACpC;AACA;AACA;AACA;AACA;AAC4B,eAAfO,eAAe,GAAG;AAC7B,UAAMC,SAAS,GAAG,MAAML,OAAO,CAACM,OAAR,CAAgBC,oBAAhB,GAAuCC,IAAvC,EAAxB,CAD6B,CAE7B;;AACA,WAAO;AAACH,MAAAA;AAAD,KAAP;AACD;;AAEDI,EAAAA,eAAe,GAAG;AAChB;AACA;AACA,UAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWN,SAAX,CAAqBO,GAArB,CAAyBC,OAAO,IAAI;AAChD;AACA;AACA,aAAO;AACLC,QAAAA,MAAM,EAAED,OADH;AAELE,QAAAA,WAAW,EAAE,iCAFR;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;AAKD,KARa,CAAd;AASA,WAAO,MAAC,IAAD,CAAM,KAAN;AAAY,MAAA,KAAK,EAAIN;AAArB,MAAP;AACD;;AACDO,EAAAA,MAAM,GAAG;AACP,WACE;AACA,YAAC,MAAD,QACE,mBACE,mCADF,EAGE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAC;AAAZ,SACE,iBACE,MAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,OAAhB;AACE,QAAA,OAAO,EAAC,iBADV;AAEE,QAAA,IAAI,EAAC,YAFP;AAGE,QAAA,OAAO;AAHT,QADF,CADF,CAHF,EAYG,KAAKR,eAAL,EAZH,CADF;AAFF,MADO,CAoBT;AACC;;AA/CmC,C,CAkDtC;;;AACA,eAAeN,aAAf","sourcesContent":["import React, {Component} from 'react';\nimport {Card, Button} from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport {Link} from '../routes';\n// npm run dev -- start the server\n\nclass CampaignIndex extends Component {\n  // The next server only renders getInitialProps unlike normal react apps\n  // where you can perform data loading with componentDidMount. So, in this app,\n  // we are using getInitialProps for data loading\n  // When you put static keyword, you can run the function without creating an\n  // instance of the component\n  static async getInitialProps() {\n    const campaigns = await factory.methods.getDeployedCampaigns().call();\n    // returns an object to be used as props (properties) of the component\n    return {campaigns};\n  }\n\n  renderCampaigns() {\n    // map() applies the function (inside it) over all the elements of the\n    // array and returns all the 'returns' to the variable on the left.\n    const items = this.props.campaigns.map(address => {\n      // fluid: yes, makes the card strech over the whole width of page, if\n      // unobstructed\n      return {\n        header: address,\n        description: <a>View Campaign</a>,\n        fluid: true\n      };\n    });\n    return <Card.Group items = {items}/>;\n  }\n  render() {\n    return (\n      // floated='right' moves the button to the right (CSS styling)\n      <Layout>\n        <div>\n          <h3>Open Campaigns</h3>\n\n          <Link route='/campaigns/new'>\n            <a>\n              <Button floated='right'\n                content=\"Create Campaign\"\n                icon=\"add circle\"\n                primary\n              />\n            </a>\n          </Link>\n          {this.renderCampaigns()}\n        </div>\n      </Layout>\n    );\n  // Primary adds color to the button\n  }\n}\n\n// Next expects that we export a react component in every page\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}