{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n// Solidity doesn't support returning array of structs.\n// So, it will be challenging to get a list of requests and details\nimport React, { Component } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { Link } from '../../../routes';\nimport Layout from '../../../components/Layout';\n\nvar RequestIndex = /*#__PURE__*/function (_Component) {\n  _inherits(RequestIndex, _Component);\n\n  var _super = _createSuper(RequestIndex);\n\n  function RequestIndex() {\n    _classCallCheck(this, RequestIndex);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RequestIndex, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, null, __jsx(\"h3\", null, \"Requests\"), __jsx(Link, {\n        route: \"/campaigns/\".concat(this.props.address, \"/requests/new\")\n      }, __jsx(\"a\", null, __jsx(Button, {\n        primary: true\n      }, \"Add Request\"))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var address, campaign, requestCount, approversCount, requests;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              address = props.query.address;\n              campaign = Campaign(address);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(campaign.methods.getRequestCount().call());\n\n            case 4:\n              requestCount = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(campaign.methods.approversCount().call());\n\n            case 7:\n              approversCount = _context.sent;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(Promise.all(Array(parseInt(requestCount)).fill().map(function (element, index) {\n                return campaign.methods.requests(index).call();\n              })));\n\n            case 10:\n              requests = _context.sent;\n              return _context.abrupt(\"return\", {\n                address: address,\n                requests: requests,\n                requestCount: requestCount,\n                approversCount: approversCount\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return RequestIndex;\n}(Component);\n\nexport default RequestIndex;","map":{"version":3,"sources":["/Users/koushik/kickstart/pages/campaigns/requests/index.js"],"names":["React","Component","Button","Link","Layout","RequestIndex","props","address","query","campaign","Campaign","methods","getRequestCount","call","requestCount","approversCount","Promise","all","Array","parseInt","fill","map","element","index","requests"],"mappings":";;;;;;;;;;;;AAAA;AACA;AAGA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,MAAR,QAAqB,mBAArB;AACA,SAAQC,IAAR,QAAmB,iBAAnB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;;IACMC,Y;;;;;;;;;;;;;WAkBJ,kBAAS;AACP,aACE,MAAC,MAAD,QACE,6BADF,EAEE,MAAC,IAAD;AAAM,QAAA,KAAK,uBAAgB,KAAKC,KAAL,CAAWC,OAA3B;AAAX,SACA,iBACA,MAAC,MAAD;AAAQ,QAAA,OAAO;AAAf,uBADA,CADA,CAFF,CADF;AAUD;;;WA3BD,yBAA6BD,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,cAAAA,OADV,GACsBD,KAAK,CAACE,KAD5B,CACUD,OADV;AAEQE,cAAAA,QAFR,GAEmBC,QAAQ,CAACH,OAAD,CAF3B;AAAA;AAAA,+CAG6BE,QAAQ,CAACE,OAAT,CAAiBC,eAAjB,GAAmCC,IAAnC,EAH7B;;AAAA;AAGQC,cAAAA,YAHR;AAAA;AAAA,+CAI+BL,QAAQ,CAACE,OAAT,CAAiBI,cAAjB,GAAkCF,IAAlC,EAJ/B;;AAAA;AAIQE,cAAAA,cAJR;AAAA;AAAA,+CAMyBC,OAAO,CAACC,GAAR,CACrBC,KAAK,CAACC,QAAQ,CAACL,YAAD,CAAT,CAAL,CACGM,IADH,GAEGC,GAFH,CAEO,UAACC,OAAD,EAAUC,KAAV,EAAoB;AACvB,uBAAOd,QAAQ,CAACE,OAAT,CAAiBa,QAAjB,CAA0BD,KAA1B,EAAiCV,IAAjC,EAAP;AACD,eAJH,CADqB,CANzB;;AAAA;AAMQW,cAAAA,QANR;AAAA,+CAaS;AAAEjB,gBAAAA,OAAO,EAAPA,OAAF;AAAWiB,gBAAAA,QAAQ,EAARA,QAAX;AAAqBV,gBAAAA,YAAY,EAAZA,YAArB;AAAmCC,gBAAAA,cAAc,EAAdA;AAAnC,eAbT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;EAFyBd,S;;AAgC3B,eAAeI,YAAf","sourcesContent":["// Solidity doesn't support returning array of structs.\n// So, it will be challenging to get a list of requests and details\n\n\nimport React, {Component} from 'react';\nimport {Button} from 'semantic-ui-react';\nimport {Link} from '../../../routes';\nimport Layout from '../../../components/Layout';\nclass RequestIndex extends Component {\n\n  static async getInitialProps(props) {\n    const { address } = props.query;\n    const campaign = Campaign(address);\n    const requestCount = await campaign.methods.getRequestCount().call();\n    const approversCount = await campaign.methods.approversCount().call();\n\n    const requests = await Promise.all(\n      Array(parseInt(requestCount))\n        .fill()\n        .map((element, index) => {\n          return campaign.methods.requests(index).call();\n        })\n    );\n    return { address, requests, requestCount, approversCount };\n  }\n\n  render() {\n    return (\n      <Layout>\n        <h3>Requests</h3>\n        <Link route={`/campaigns/${this.props.address}/requests/new`}>\n        <a>\n        <Button primary>Add Request</Button>\n        </a>\n        </Link>\n      </Layout>\n    );\n  }\n}\n\nexport default RequestIndex;\n"]},"metadata":{},"sourceType":"module"}